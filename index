<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <title>Gradle / Kotlin Plugins — Version Checker</title>

    <!-- Prism.js -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-kotlin.min.js"></script>

    <style>
        :root{
            --bg:#0f1720;
            --card:#0b1220;
            --muted:#9aa4b2;
            --accent:#7dd3fc;
            --accent-2:#60a5fa;
            --glass: rgba(255,255,255,0.03);
        }
        *{box-sizing:border-box}
        body{
            margin:0;
            padding:26px;
            font-family: Inter, ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
            background: linear-gradient(180deg,#071025 0%, var(--bg) 100%);
            color:#e6eef6;
            -webkit-font-smoothing:antialiased;
            -moz-osx-font-smoothing:grayscale;
        }
        header{
            display:flex;
            gap:16px;
            align-items:center;
            margin-bottom:18px;
        }
        h1{margin:0;font-size:20px;letter-spacing:-0.2px}
        .controls{margin-left:auto;display:flex;gap:8px;align-items:center}
        button, .small-btn{
            background:var(--card);
            border:1px solid rgba(255,255,255,0.03);
            color:var(--muted);
            padding:8px 12px;
            border-radius:8px;
            cursor:pointer;
            font-size:13px;
        }
        button:hover, .small-btn:hover{color:#fff}
        .container{
            max-width:980px;
            margin:0 auto;
        }

        .grid{
            display:grid;
            grid-template-columns: 1fr;
            gap:14px;
        }

        .card{
            background: linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));
            border-radius:12px;
            padding:14px;
            border:1px solid rgba(255,255,255,0.03);
            box-shadow: 0 6px 18px rgba(2,6,23,0.6);
        }
        .card h2{
            margin:0 0 8px 0;
            font-size:14px;
            color:var(--accent);
        }

        .code-block{
            position:relative;
            padding-top:36px;
        }
        .meta {
            position:absolute;
            left:14px;
            top:12px;
            display:flex;
            gap:8px;
            align-items:center;
            font-size:12px;
            color:var(--muted);
        }
        .meta .ver { color:var(--accent); font-weight:600; white-space:nowrap; }

        .actions{
            position:absolute;
            right:12px;
            top:10px;
            display:flex;
            gap:8px;
        }

        .copy-btn{
            background:transparent;
            border:1px solid rgba(255,255,255,0.04);
            padding:6px 10px;
            color:var(--muted);
            border-radius:8px;
            cursor:pointer;
            font-size:13px;
        }
        .copy-btn:hover{color:#fff}

        pre {
            margin:0;
            border-radius:8px;
            overflow:auto;
            font-size:13px;
            line-height:1.5;
        }

        .status {
            font-size:12px;
            color:var(--muted);
            margin-left:8px;
        }

        footer{
            margin-top:18px;
            color:var(--muted);
            font-size:13px;
        }

        /* Responsive */
        .grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 14px;
        }

    </style>
</head>
<body>
<div class="container">
    <header>
        <h1>Gradle / Kotlin: Versions & Copy-Tool</h1>
        <div class="controls">
            <button id="refreshBtn">Neueste Versionen laden</button>
            <button id="copyAllBtn">Alles kopieren</button>
        </div>
    </header>

    <div class="grid" id="grid">
        <!-- Cards werden per JS erzeugt -->
    </div>

</div>

<script>
    // --- Konfiguration: hier kannst du Einträge anpassen ---
    // type: "maven" -> versucht Maven Central (group, artifact)
    // type: "raw" -> fester Text
    // type: "papermc" -> holt die neueste paper version (z.B. "1.21.8") und lässt dich formatieren
    // type: "gradle" -> holt aktuelle Gradle distribution version
    const items = [
        {
            id: "plugins",
            title: "plugins",
            type: "template",
            template: `plugins {
    kotlin("jvm") version "{{kotlin_version}}"
    id("io.papermc.paperweight.userdev") version "{{paperweight_version}}"
}`
        },
        {
            id: "repositories",
            title: "repositories",
            type: "raw",
            raw: `repositories {
    mavenCentral()
    maven("https://papermc.io/repo/repository/maven-public/")
    maven("https://jitpack.io")
}`
        },
        {
            id: "dependencies",
            title: "dependencies",
            type: "template",
            template: `dependencies {
    paperweight.paperDevBundle("{{paper_bundle}}")
    implementation("net.axay:kspigot:{{kspigot_version}}")
}`
        },
        {
            id: "kotlin",
            title: "kotlin config",
            type: "raw",
            raw: `kotlin {
    jvmToolchain(21)
}`
        },
        {
            id: "tasks",
            title: "tasks",
            type: "raw",
            raw: `tasks {
    assemble {
        dependsOn(reobfJar)
    }
    compileJava {
        options.encoding = "UTF-8"
        options.release.set(21)
    }
    compileKotlin {
        kotlinOptions.jvmTarget = "21"
    }
}`
        },
        {
            id: "gradle-wrapper",
            title: "gradle-wrapper (distributionUrl)",
            type: "template",
            template: `distributionUrl=https\\://services.gradle.org/distributions/gradle-{{gradle_version}}-bin.zip`
        }
    ];

    async function fetchGithubLatest(owner, repo) {
        const releaseUrl = `https://api.github.com/repos/${owner}/${repo}/releases/latest`;
        const tagsUrl = `https://api.github.com/repos/${owner}/${repo}/tags`;
        try {
            let res = await fetch(releaseUrl);
            if (res.status === 404) {
                // Fallback auf Tags
                res = await fetch(tagsUrl);
                if (!res.ok) throw new Error(`GitHub API Fehler: ${res.status}`);
                const tags = await res.json();
                if (tags.length === 0) throw new Error("Keine Tags gefunden");
                return tags[0].name.replace(/^v/, "");
            }
            if (!res.ok) throw new Error(`GitHub API Fehler: ${res.status}`);
            const data = await res.json();
            return data.tag_name.replace(/^v/, "");
        } catch (e) {
            console.warn(`Fehler bei ${owner}/${repo}:`, e);
            return "???";
        }
    }



    // --- Welche Maven-Artefakte sollen automatisch geholt werden ---
    // group / artifact für Maven Central queries
    const githubLookups = {
        kotlin_version: ["JetBrains", "kotlin"],
        kspigot_version: ["Jakobkmar", "KSpigot"],
        paperweight_version: ["PaperMC", "paperweight"]
    };


    // --- Hilfsfunktionen zur API-Abfrage ---
    async function fetchMavenLatest(group, artifact) {
        // Benutze Maven Central Search API (Solr)
        const q = `g:"${encodeURIComponent(group)}"+AND+a:"${encodeURIComponent(artifact)}"`;
        const url = `https://search.maven.org/solrsearch/select?q=${q}&rows=1&wt=json`;
        try{
            const res = await fetch(url);
            if(!res.ok) throw new Error('HTTP '+res.status);
            const j = await res.json();
            const doc = (j.response && j.response.docs && j.response.docs[0]) || null;
            if(!doc) return null;
            // verschiedene Keys möglich: latestVersion, v
            return doc.latestVersion || doc.latest || doc.v || doc.latest_version || null;
        }catch(e){
            console.warn("Maven fetch failed", group, artifact, e);
            return null;
        }
    }

    async function fetchPaperLatest() {
        // PaperMC API: list versions, wähle das letzte (neueste)
        try{
            const res = await fetch("https://api.papermc.io/v2/projects/paper");
            if(!res.ok) throw new Error('HTTP '+res.status);
            const j = await res.json();
            const versions = j.versions || [];
            if(versions.length === 0) return null;
            // versions ist meist sortiert ascending; nimm das letzte
            return versions[versions.length - 1];
        }catch(e){
            console.warn("PaperMC fetch failed", e);
            return null;
        }
    }

    async function fetchGradleCurrent() {
        // Gradle provides a "current" endpoint
        try{
            const res = await fetch("https://services.gradle.org/versions/current");
            if(!res.ok) throw new Error('HTTP '+res.status);
            const j = await res.json();
            return j.version || (j.name && j.name.replace('Gradle ',''));
        }catch(e){
            console.warn("Gradle fetch failed", e);
            return null;
        }
    }

    // Build the UI cards and fill dynamic versions
    const grid = document.getElementById('grid');
    let latestInfo = {}; // speichert ermittelte Versionen

    function createCard(item, text) {
        const card = document.createElement('div');
        card.className = 'card code-block';
        card.id = 'card-'+item.id;

        // meta/top left
        const meta = document.createElement('div');
        meta.className = 'meta';
        meta.innerHTML = `<strong style="color:var(--accent)"># ${item.title}</strong>`;
        card.appendChild(meta);

        // actions top right
        const actions = document.createElement('div');
        actions.className = 'actions';
        const copyBtn = document.createElement('button');
        copyBtn.className = 'copy-btn';
        copyBtn.textContent = 'Kopieren';
        copyBtn.title = 'Kopieren';
        copyBtn.addEventListener('click', async () => {
            await navigator.clipboard.writeText(text);
            copyBtn.textContent = 'Kopiert';
            setTimeout(()=>copyBtn.textContent='Kopieren',1400);
        });
        actions.appendChild(copyBtn);

        const refreshSmall = document.createElement('button');
        refreshSmall.className = 'small-btn';
        refreshSmall.textContent = 'Refresh';
        refreshSmall.title = 'Neu laden (nur dieser Block)';
        refreshSmall.addEventListener('click', async () => {
            await loadAndRender(true);
        });
        actions.appendChild(refreshSmall);

        card.appendChild(actions);

        // code
        const pre = document.createElement('pre');
        pre.innerHTML = `<code class="language-kotlin">${escapeHtml(text)}</code>`;
        card.appendChild(pre);

        return card;
    }

    // escape funktion
    function escapeHtml(s){
        return s.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;");
    }

    // rendert alle Items in grid
    function renderAll(renderedTexts){
        grid.innerHTML = '';
        for(const item of items){
            const t = renderedTexts[item.id];
            const card = createCard(item, t);
            grid.appendChild(card);
        }
        // Prism re-highlight
        Prism.highlightAll();
    }

    // Hauptfunktion: lädt Versionen, füllt Templates und rendert
    async function loadAndRender(force=false){
        // Zeige temporären Status
        grid.innerHTML = '';
        const loadingCard = document.createElement('div');
        loadingCard.className = 'card';
        loadingCard.textContent = 'Lade aktuelle Versionen…';
        grid.appendChild(loadingCard);

// 1) GitHub lookups
        const lookupKeys = Object.keys(githubLookups);
        const promises = lookupKeys.map(async key => {
            const [owner, repo] = githubLookups[key];
            const v = await fetchGithubLatest(owner, repo);
            latestInfo[key] = v;
        });


        // 2) Paper
        const paperPromise = fetchPaperLatest().then(v => { latestInfo.paper = v; });

        // 3) Gradle
        const gradlePromise = fetchGradleCurrent().then(v => { latestInfo.gradle = v; });

        await Promise.all([...promises, paperPromise, gradlePromise]);

        // If paper found, produce paper_bundle as expected by paperweight.paperDevBundle
        // Many plugins use format like "1.21.8-R0.1-SNAPSHOT" or "1.21.8-R0.1-SNAPSHOT"
        // We'll attempt a reasonable default: `${paper}-R0.1-SNAPSHOT`
        if(latestInfo.paper){
            latestInfo.paper_bundle = `${latestInfo.paper}-R0.1-SNAPSHOT`;
        }

        // Fill templates for each item
        const rendered = {};
        for(const item of items){
            if(item.type === 'raw'){
                rendered[item.id] = item.raw;
            }else if(item.type === 'template'){
                // replace placeholders like {{kotlin_version}}
                let t = item.template;
                t = t.replaceAll('{{kotlin_version}}', latestInfo.kotlin_version || '{{kotlin_version}}');
                t = t.replaceAll('{{kspigot_version}}', latestInfo.kspigot_version || '{{kspigot_version}}');
                t = t.replaceAll('{{paperweight_version}}', latestInfo.paperweight_version || '{{paperweight_version}}');
                t = t.replaceAll('{{paper_bundle}}', latestInfo.paper_bundle || '1.21.8-R0.1-SNAPSHOT');
                t = t.replaceAll('{{gradle_version}}', latestInfo.gradle || '8.14.3');
                rendered[item.id] = t;
            }else{
                rendered[item.id] = '// unknown item type';
            }
        }

        renderAll(rendered);

        // Append small version badges on each card
        for(const item of items){
            const el = document.querySelector('#card-'+item.id+' .meta');
            if(!el) continue;
            const span = document.createElement('span');
            span.className = 'status';
            // show some common keys
            let s = [];
            if(latestInfo.kotlin_version) s.push('kotlin: '+latestInfo.kotlin_version);
            if(latestInfo.kspigot_version) s.push('kspigot: '+latestInfo.kspigot_version);
            if(latestInfo.paper) s.push('paper: '+latestInfo.paper);
            if(latestInfo.gradle) s.push('gradle: '+latestInfo.gradle);
            span.textContent = s.join(' · ');
            el.appendChild(span);
        }
    }

    // copy all assembled blocks into one big build.gradle.kts style text
    function assembleAllText(){
        const nodes = document.querySelectorAll('#grid pre code');
        let out = '';
        nodes.forEach((n, idx)=>{
            out += n.innerText + "\n\n";
        });
        return out.trim();
    }

    document.getElementById('refreshBtn').addEventListener('click', () => loadAndRender(true));
    document.getElementById('copyAllBtn').addEventListener('click', async () => {
        const txt = assembleAllText();
        await navigator.clipboard.writeText(txt);
        const b = document.getElementById('copyAllBtn');
        b.textContent = 'Alles kopiert';
        setTimeout(()=>b.textContent='Alles kopieren',1400);
    });

    // Initial load
    loadAndRender();

</script>
</body>
</html>
